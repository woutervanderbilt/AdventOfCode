using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Problems.Advent._2020;

public class Dag20 : Problem
{
    #region input

    private const string testinput = @"Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...";



    private const string input = @"Tile 1249:
...#......
#..#..#.##
##........
#.#.......
..........
#...###...
#..#......
#...##....
..........
.....#...#

Tile 1693:
..#..####.
#.........
##..#....#
#.....#..#
......#.##
#........#
.....##...
.#..##.#.#
##........
###..#....

Tile 1481:
....#####.
#....#..##
##..#....#
##..#...#.
#..#.#...#
..........
...#..#...
.#...#...#
#...#.....
..#..##.##

Tile 3169:
####...#.#
#.#.....#.
.#......##
..#.#....#
...###..#.
#....###.#
.......#..
##.##.....
.#.#......
.#....#...

Tile 1229:
##..###..#
#.......#.
..#..##..#
##..#.....
#.#..#..#.
.#..#.#.##
....#....#
#..#..#.##
....#....#
..##..####

Tile 1489:
#......#..
....#.....
#.....#..#
#.......#.
#.#..#..#.
#.........
#........#
#..#.#....
#.........
....####.#

Tile 2477:
#####.##.#
.###...###
#....#..##
.#.#..#..#
###.##...#
#........#
#..#..#...
.......#.#
#......###
##.##.##.#

Tile 2897:
##.##..#.#
#.......##
#.#..#.#..
..#...#..#
...##.#..#
..#.......
#.#..##..#
..#....#.#
#....#.#.#
#......###

Tile 2083:
..#...##.#
###.#.##..
....##....
#...#..#..
...##....#
#..#......
.#.##.....
..##..####
....###..#
.#...#.#..

Tile 1069:
..#.#.#..#
..#....#.#
.........#
##..#.....
#.....#...
..##......
#..#......
.##..#####
#.#....#..
.....#..#.

Tile 1427:
...####.##
.###......
.#..#.#..#
..#.###.##
.#..#.....
..##.#....
.#......#.
#....#...#
.......#..
#.#..###..

Tile 1429:
.##.#.#.#.
#..##....#
..#......#
...#....##
...#.##..#
..#.#.....
#....#..##
#..#.....#
.##....#..
##.#.#...#

Tile 2357:
#.##..#.##
.........#
#..#.#..##
#....#.#..
#........#
#...##....
#....#....
....##...#
#.#..##...
.###.#.#..

Tile 3181:
...#..####
........#.
#...#...##
#.#.....##
#.........
##...#....
#.##.....#
#....#...#
..#.#...##
#..###.##.

Tile 2887:
.#..#.###.
#.........
.#....#...
#........#
..#.##...#
.......##.
....#.#..#
#...###..#
.#...#..##
###...#..#

Tile 2837:
##.##..###
.......#.#
....#.#..#
.......##.
.....#....
#.#.##..#.
#.#..#...#
....#.##..
..#......#
...######.

Tile 2539:
.###....#.
.......##.
##.##...#.
.###.....#
###..##...
.##....#.#
........#.
..........
.#........
#.....#...

Tile 2399:
##.#..##..
#...#.#..#
.##......#
###..##...
.#....#...
....#.#...
.....###.#
#.......##
#......#..
.##.##....

Tile 2383:
#..##.###.
.#.......#
#.#..#....
#..#.#...#
#.#.#.....
......#...
#....#..#.
..#.#.#..#
#..#.##..#
.#.##...##

Tile 2521:
.#..#.##.#
#........#
#.#...#.##
#........#
##.#.#..##
#..######.
.##..##..#
.#.....##.
.#.#......
..#..#####

Tile 1823:
#.#...##..
#..#.....#
.##......#
#...###.#.
......#...
.....##...
#....##.#.
#.........
#..#.....#
#.#.##.#..

Tile 1301:
####.#.###
#.##...##.
..#...####
..........
#....#..##
....#..#..
#..#.#.#..
...#...#..
###..###.#
.##..#.#.#

Tile 1289:
#.###....#
#.#.....#.
#.....##.#
#........#
.##.#...#.
.###..#...
..#.......
.##...#...
...#....##
.###....#.

Tile 3823:
#.##.##..#
.........#
#...##.#.#
.#.##.....
##.....#..
.#..#....#
#...#...##
#.........
#........#
.#.##.####

Tile 2411:
#.####.###
#....#.###
..##.....#
#.#...#..#
##...#.#.#
##.##...##
#.......#.
#...##...#
.........#
###.##.##.

Tile 1039:
.......#.#
..#.......
........#.
.##...####
##...#..##
.#.......#
..#.#.....
...#.....#
.........#
..#...#...

Tile 1609:
.##..#..##
##.###.###
.#.....#..
#........#
...#...#..
#.......##
...#..###.
#.##.##.##
#.......#.
...#.#....

Tile 2017:
##..#..#..
....###...
..##......
#...#.###.
#....#....
#.#.......
#..#.#....
###..##..#
###.#....#
#.#.#.#.##

Tile 3301:
.#####...#
...##.....
#..###...#
#....#...#
...#.#...#
#......#.#
#........#
...#......
.......#.#
..#####...

Tile 3733:
#####.##.#
#.##..#..#
#....#..##
#....#....
.....##...
#......#..
#....##.##
.........#
.#..#....#
.....##...

Tile 2309:
#..##.##..
...#.#.#.#
#..##.#..#
....##....
##....#..#
##..##.#.#
.###....#.
###...#.##
....#.....
.#.#.###.#

Tile 2879:
#.##.##...
...#.....#
...##.####
...#.#.#.#
#.###.##.#
.....#...#
#.....#.#.
#..#.#..##
.....###..
.##..#.###

Tile 3583:
.#.##...#.
..##...##.
#.#....##.
#.##...#.#
.....#..##
#####.....
..###..#..
..##..#.#.
.##....##.
##.##...#.

Tile 2153:
##...####.
..#.#...#.
##..##..#.
.#..#.#...
..........
..#...#...
#....#.###
...##....#
#.##.....#
#...#....#

Tile 3581:
#...##.###
..####..##
...##....#
.#..#.....
.##......#
#.#......#
...###.#.#
###.#.....
#.##.##...
#.#.....#.

Tile 2927:
##.#.#..##
..........
..........
.....#....
#..#..#..#
....#.#...
.#...#...#
.#...##..#
......#...
###.#.##.#

Tile 2861:
.#..#.###.
#..#....##
#.#.#..#..
........#.
..#.#.#...
...##....#
#..###.#.#
#..#..##..
..#.#....#
.#..####.#

Tile 2851:
#.#....#..
#........#
.#........
#..##.#...
..##....##
.#.......#
#.........
......#..#
..........
###.##..##

Tile 3319:
...##....#
#.......##
##.#..#...
.##....###
#...#...##
..#.......
.###..#..#
#...#.....
.........#
.#..##.#..

Tile 2143:
...#......
##.#...#.#
##.......#
#.##..#..#
..#...#..#
.#.#...#..
..#....#..
......#...
#.#.......
#..#..#.##

Tile 1093:
#.#...#.#.
##..#.....
.........#
##..#...##
##..#..#..
##..##....
##.##....#
#.#....#..
.#.#..#..#
..#.##.###

Tile 3391:
#....#..#.
#...#..#..
##....##..
..#.#..#.#
#####...##
..#..#...#
#.#......#
.#...#....
.....##.##
.#.#.#....

Tile 3917:
...##.#...
#..#.....#
#..##.###.
#.#..#..#.
.####..#.#
..##.#.###
#.#..##.#.
#....##..#
..###.#..#
..##.####.

Tile 1847:
#.##.#..#.
.#.##.....
#.#..#..#.
#....#.#..
.#.......#
..#..#.#.#
..##....##
#.#.##....
##.#..#...
.##.##.###

Tile 1667:
.##..#..#.
###....##.
#.####.#.#
...#.....#
.#.#..##.#
.#..#....#
#.##.#...#
#.#.#.....
...###...#
#.#..####.

Tile 1217:
...#####..
....#..#.#
..#...####
#........#
#........#
###..#...#
.##.##...#
.#.......#
.....##...
.##.#.###.

Tile 3467:
###.##....
.......#.#
.....#..##
##..#....#
....#..#..
....#..###
#......###
#.##...#..
..#.....##
...#.#..#.

Tile 1297:
..###..##.
#....#.#.#
.........#
###.#....#
#......#.#
##....##..
#.#.##..##
.##.....#.
.....#...#
.#.##.....

Tile 3877:
..###.#...
##..#....#
###.##..##
.#..######
....#.#..#
.#.......#
#...##.#..
..#..#....
#.##.##..#
#..##.#.#.

Tile 2389:
##...#####
##..#.#..#
#..#.....#
......#..#
.#........
#....##.#.
.##....#..
#.....#.#.
#........#
...##.#...

Tile 3361:
.....#.#..
.........#
...#....#.
##.##.....
#....##...
##...#...#
#...####.#
..##.....#
...#...#.#
###.####..

Tile 2207:
###.##..#.
#..###....
......#..#
#........#
##....##.#
........#.
...#..#...
#....#..##
...####...
##........

Tile 1997:
..#.#..###
......#...
...#...#..
..#......#
.........#
#....#...#
....#..#..
.....#....
#........#
#....#####

Tile 1063:
#.#...##..
.##..#....
#.#..##...
..#...####
......##..
#...#.#...
####......
.#.....#..
.#.......#
#...####..

Tile 3109:
...###.###
.......#..
......##.#
.#......##
#..##..#..
##..#..#.#
.....##.##
#....#.#.#
.....###..
####....#.

Tile 1097:
#####.##..
.#...#.##.
..#..#....
#..#....#.
#.#....#.#
.#...#.#.#
#....#..##
#....#...#
...#...#..
...#.#..#.

Tile 1117:
#..##.#.##
#.#.....#.
...#.#...#
#.#..##.#.
#.###..#..
#....#...#
....#.....
.#...#...#
..##..#..#
.#.#.....#

Tile 2551:
.#..#.####
#...#.....
##....##.#
#....#....
.##.....#.
.#...#....
#....#.#..
......#...
##.#.#....
.#....#..#

Tile 2677:
.#.####..#
#.#.....##
...#.#....
.#...#...#
.##...#..#
##....#...
...##.#..#
##...#..##
##...#...#
##...###.#

Tile 1367:
.#.##...##
#.#..#....
....##.#..
.........#
.#....##.#
....#.##..
....##...#
#.#..#...#
#.#.#..##.
....#.##.#

Tile 1913:
.##..#..##
.#...##.##
..#.....#.
......#...
...#...##.
...####...
..#..#....
....#.#...
#.........
.####.####

Tile 1709:
.#....##..
..#...#.##
.#......#.
...#....##
.#.##...#.
.#.#.#.###
.........#
#.......#.
##....#...
..#.##.###

Tile 1459:
.##..#.#..
...##.....
.#.#...###
...#.....#
##..#..#.#
.........#
.........#
....#...#.
#..#......
...#.#...#

Tile 2137:
##..#....#
#.#####.#.
......#..#
#.#......#
#...#..#.#
#..#..#.##
###..####.
.##..#...#
#.#.......
.##.##....

Tile 2659:
#.##..#...
#...##....
#...#...#.
#........#
#....#....
.......##.
..#.....#.
#.#..##..#
#......#..
..###.#..#

Tile 2657:
####...##.
........#.
..####..#.
..#.......
....#.#..#
#.#.#.#...
...#....#.
###...####
........##
##.#.#.#..

Tile 2099:
#.###.##.#
#..#...###
..#......#
.#...#.#..
...##.....
###.##...#
..##..#...
...#......
..#.#.#.#.
..#.##....

Tile 3209:
##.###....
...#....#.
#..##..##.
##.##.#...
.#..#....#
#..#.#...#
.#...#...#
#..#......
...#......
..#.#.###.

Tile 1879:
#.##.#.##.
.#.##.#...
#..#.#....
#.....###.
#..##.....
....##....
#..#..#...
#.........
..#.##....
...####.##

Tile 1621:
###....#.#
.........#
.#....##..
.....#.#..
.#...#.#..
##...####.
.....#...#
#.........
....#.#..#
.####...##

Tile 3931:
.####.###.
#.##.....#
#..#.#...#
..#......#
###..#.##.
....##....
#..#......
..........
.#.....#.#
#.##.#..##

Tile 2777:
##....####
.#.#......
##......#.
#.......##
.#..#.#..#
##.#...#.#
##.#.....#
...##....#
#..#.#....
#.#..#....

Tile 2909:
#......##.
#........#
..#.#.###.
.......#.#
........##
....#.....
......#...
#........#
#.......#.
......#.#.

Tile 1777:
.##...####
.##.....#.
#..#.#..#.
.#......##
.#....#..#
#.###.#...
.#.#......
###..#...#
.#.......#
..#...#.##

Tile 3251:
...#.###..
#....##..#
#....#..#.
#....#..##
.....#...#
#.......##
.......#.#
#....#..#.
#...##...#
.#.#.....#

Tile 1601:
#....#....
.##.##...#
.........#
#.........
.#.....###
#..##.#.#.
#......#.#
.#..#.#..#
.#...#....
.#.#.#..##

Tile 1283:
#####.#..#
..#....##.
#..#......
.#....##..
.#.#.....#
##......##
#.....##..
##..#....#
#........#
.#.###..##

Tile 3079:
..#.##....
.......#.#
..#...##.#
..###...#.
#..#.....#
..##.....#
..#..#.#..
.##.#.#..#
#..#......
.#.##..#..

Tile 3793:
##..#####.
##...#....
##....#...
..........
#.........
.#....#..#
#....#..#.
#....#....
###..##...
#.###.##..

Tile 3037:
.##.#..##.
#..#.###..
.#....#...
...####..#
..#.###..#
#.#..#....
.##......#
#.....#..#
#...#.#...
##.######.

Tile 1669:
##.#......
.#......#.
##.#...#.#
#.#.#.#..#
##........
##....#...
#.#.....#.
..........
.........#
####...###

Tile 1087:
.###.#.#.#
###.......
.....#...#
##.....#..
.#.#......
...#......
#...#..#.#
#........#
#..#....##
.#...#####

Tile 2617:
.##..#.#..
.....#...#
..#.#.....
....#...##
####...##.
..##......
...#...#..
..#.#.##.#
#.#.......
###.##....

Tile 3943:
.#.####..#
.........#
#.........
.#........
###..#....
...#....#.
#...#.#...
.#......#.
...##.#...
..##....#.

Tile 2273:
##.#.#...#
...##.#..#
..##......
..#.....#.
#......#..
...#....#.
.##....#.#
...#.#.#..
#..###.#.#
###.#..##.

Tile 3803:
##....#..#
##...#.#.#
..##....#.
#...#..###
....#.....
....#.####
#.....##..
##....###.
#....#..##
#####.##..

Tile 1697:
....####.#
#....#.#.#
#.....#.##
#......#..
#.#...#...
#....#.#..
.##....#..
##...#.#.#
#.#..#..#.
.......#..

Tile 3343:
######.#..
#....##...
#.#.##...#
#...####..
#......#..
##.#..##.#
#.....##.#
..##.##..#
..#......#
###..##...

Tile 1549:
#.##.###.#
.....###..
...#.###..
##...##..#
#.#.......
#.........
....#....#
..#.....##
.....##...
#.#.##.##.

Tile 1619:
..###.###.
##.###...#
#...##...#
....##...#
..##..#.#.
#...#.#..#
#.......##
#..#.....#
....##...#
.#...#.#..

Tile 2971:
..##.###..
#.....#..#
#..#.....#
#..#...#.#
...#......
#......###
#....####.
.#....#...
...#.....#
#...###..#

Tile 3617:
####...#..
.......#.#
.#.#......
#..##..###
.##.......
.#....#..#
.....#.###
....##.#..
#....#...#
.#.##.####

Tile 1543:
......#.##
#......#.#
##.....###
#...#...##
#.#....#..
.#........
#....#....
......##..
##...#..#.
#...#.##.#

Tile 2111:
####..#...
#..#...#.#
#.#.#.##..
##........
#...#..#..
#.##..#...
#.........
##.#..#...
.##.#.###.
#.##.####.

Tile 1499:
#.####.#..
..##.#...#
#..#......
....#.....
.#..##...#
#.#...##.#
...#.##.##
###..#.###
.....#....
...##.##.#

Tile 3461:
.#####.#.#
#.........
..#..#....
..#......#
###...####
...#.##..#
.#........
#..#....##
#...#...##
####.....#

Tile 1483:
.....#.##.
##........
#.#.....#.
##......#.
#.....#...
..#.......
##....#..#
##........
..#...####
......###.

Tile 2467:
###.#.#...
#.#.....#.
#...#....#
#....#...#
...#..#..#
##...#....
#.#.###...
#..##..#.#
#.........
..######.#

Tile 3631:
###.#...##
.........#
#.##..#...
...##..#..
##..#.#..#
#..#.#....
......#.#.
..........
#......##.
..##.#....

Tile 3767:
#...#.#..#
..........
#......#.#
#...#.#..#
##.......#
..#......#
........#.
##...##.##
#........#
....#....#

Tile 2381:
.#.#.##...
#.##.#....
...##.#.##
#.....#.#.
#......#..
...#....#.
......####
#.#.#.....
##...##..#
...#...#.#

Tile 2687:
###...####
.....#.###
..#.#.#.#.
##..#...##
#.###...#.
..#.##..##
##.....#..
##..#..#.#
#...#..#.#
#.#..###.#

Tile 3719:
..####.#..
.#......##
#......###
##....###.
.#...##.##
.#.....#.#
..##..#.#.
#......###
...#...#..
......###.

Tile 3259:
######.#.#
#..#......
.........#
#.......#.
..##...#..
##...##.##
#......#.#
##.......#
#.......#.
#..##.#.##

Tile 3643:
###..#..##
#.#.#.#...
..##....#.
##....##..
..##......
#..#..#.##
......##..
#.......#.
#...##..##
#.#..#.###

Tile 2767:
####....##
..........
.........#
..#....#.#
#......###
#.##..#..#
#.#..#.#..
...#.#...#
#..####..#
##..#####.

Tile 2333:
###..#.##.
..##.....#
..#.#..##.
#.....#..#
....#.#...
##...#....
#.#......#
###.......
#...#....#
..#..#..##

Tile 2857:
..#..##..#
#.....#...
##....#..#
#...##....
....#.#..#
#.#.##....
#...##..#.
.#...##..#
#...#.#...
.#.###.#.#

Tile 1193:
#.#..#.#.#
##..####..
###..##.#.
#.......##
###....##.
...#...#..
#...#....#
##.......#
#####.##.#
..#####.##

Tile 2351:
.##..#####
#.........
.#..#.....
#.##.#...#
..#.#..#..
#.###....#
###..#....
##.......#
#...#..#..
.....#...#

Tile 1129:
..##..####
.....##..#
##........
.........#
#...#.....
....#...##
..#....##.
..#.....#.
..#.......
.##.###...

Tile 3433:
.##..#....
...###.###
.......##.
#..#.#.#.#
........#.
...###...#
...#......
.##...###.
.#.#..#..#
##..##..#.

Tile 1091:
###.####..
.#..#.....
##.......#
#.#...#...
...##.....
#..###...#
..##...#.#
#...#..###
.....#...#
###.#....#

Tile 3407:
.####.#...
.#..#.#..#
..#..#....
......#..#
.........#
#...##...#
...#.###.#
#....#...#
#.....###.
.#.#.#.#..

Tile 2591:
.##..##...
..#...##.#
...#..####
.#....#.##
#...##.#..
#...#....#
#..#.....#
#..#.....#
..........
.#.###.#.#

Tile 3613:
###.######
.#...##..#
#.##.....#
#.........
#...#.....
###.....##
.#.##.#..#
##..#...##
####......
..#...#...

Tile 3967:
#.#..#.#..
#..#.....#
...##...#.
.#.##...#.
#####..#.#
..##.#..#.
..........
#.#.#..#.#
#.#.....##
#..#####.#

Tile 1999:
#.#.#..##.
####.##.##
..##...#.#
....#....#
.##.#.#...
..........
.......##.
#.#......#
##...#.#.#
.#.#.#.#..

Tile 2689:
.#..#####.
.#........
..#....#.#
#......#.#
.#.#..#.##
###...#..#
...#...#.#
##......##
......##.#
.##.#..##.

Tile 3533:
.####.#...
#........#
#......#..
.........#
#..#.##..#
###....#.#
...##..#..
..#.....#.
#...#..###
..###.##.#

Tile 2267:
#.##...#.#
#....#....
.#.#.##...
.#....#.##
..#.#.....
.##.......
##.....#..
####....#.
......#..#
#..##..#.#

Tile 2297:
###..##...
#..##..##.
..#....#.#
#.#.##...#
..#.##..#.
...##...#.
#...#.....
.....#.#.#
#..#....#.
.###..##..

Tile 2711:
##..##...#
...##....#
...#..#.#.
#........#
...#.....#
........##
##....##..
#.##.....#
#.###.....
###...#..#

Tile 1931:
.###...###
......#.##
....##..##
#...#...#.
..#..##.#.
#.....#..#
#...#....#
#........#
...#..#.#.
#.##..###.

Tile 1787:
#...##..##
..#.......
#..#.#.#..
...#..#..#
.##.#..###
#.#.#.....
..........
....##...#
..........
.#.#...#..

Tile 2549:
##.#...###
.....#...#
#......###
##.###....
#..#....#.
##.......#
.#........
..###...##
##..##...#
#.##...#.#

Tile 2789:
#.#.#.#.##
#...#.##..
.##...#.##
#.##.#....
...#......
###.......
#.......##
#.#...#..#
..#.#....#
.##.#..#..

Tile 2707:
#..#.#...#
#.#.#.#...
...#..#..#
##.#.....#
#....#.##.
.....#...#
#.....#...
....#.#...
#..###...#
##..##.###

Tile 3313:
###.#..#..
.#....#..#
...#.....#
....#..###
....#..#..
#..#.#....
##.#..##..
..#...#.##
##..##....
.##.###.#.

Tile 1607:
..#...###.
#.....#...
#.......##
#.....#...
###.#.#..#
#.#.....#.
#..#...###
.........#
..#.......
##.#.#####

Tile 3889:
###.#...##
##.......#
....#..#..
#.#......#
.##......#
#...##....
#....##..#
.......#..
#...#...#.
##.#####.#

Tile 3821:
..###.##..
........##
#..##..#.#
.##.#..#.#
#....##.##
#.....##.#
#.....#..#
##........
#.#..#....
##.#.###..

Tile 3347:
.##..#...#
#.#...#...
#..#..###.
.#......#.
#..###.##.
......#...
##..##.#..
.#.###.#..
........#.
#.###..##.

Tile 1907:
.#.##...#.
#......#..
...#......
##.......#
.#.....#..
.#.....###
........##
.##.#..#.#
##.....#..
#.########

Tile 2903:
##.....#.#
....#.##..
...#.....#
.#..#####.
.....##.#.
.#......#.
..........
#..#.....#
....#...##
.#..##..##

Tile 1399:
#....###.#
..#..#####
.#....##.#
...#...#..
#..##.#..#
.....#....
..#......#
........##
#..###....
#..###.###

Tile 1993:
###.##..#.
##........
##..#..##.
.........#
.........#
#..##.#.#.
.##.......
#..#.....#
#.##.#..##
##.#.#..#.

Tile 3671:
...##.#..#
##....##.#
#..#....##
#..#...#.#
.#.#.#...#
........##
..........
##.......#
#.##....##
.#..#..##.

Tile 3167:
###..##..#
.....##...
.......#..
#...#.#..#
.#.##.#..#
###....##.
##........
#.........
..#..#....
.....##.#.

Tile 1109:
..#...#..#
#..#.#.#..
.#........
.......#.#
#..#..#...
.........#
##.#......
........##
#.#.##..#.
..#..#.#..

Tile 3089:
.###.#####
#..#..#.#.
#......#.#
...#.....#
.........#
.#.#...#..
.#..#.#.##
.......###
.#.#..#.##
..#..###..

Tile 1051:
.....##..#
#...##.#..
..........
..........
#.#.##..#.
...##...##
.##.#####.
.#...##..#
..#.#...#.
#.......##

Tile 2113:
#...###.##
.#.....##.
...#....##
...##..#..
#....#...#
..##.#....
##....#.#.
..#...###.
.....#.#.#
.##......#

Tile 2131:
#....#####
#.#.......
.###.#..##
###.##.#..
#...#.....
.#.#.....#
###....#..
..#.....##
.#...##.##
#..###....
";
    #endregion

    private const int Size = 12;
    public override Task ExecuteAsync()
    {
        IList<Tile> tiles = new List<Tile>();
        Tile currentTile = null;
        int currentLine = 0;
        foreach (var line in Input.Split(Environment.NewLine))
        {
            if (string.IsNullOrEmpty(line))
            {
                continue;
            }
            if (line.StartsWith("Tile"))
            {
                long id = long.Parse(line.Substring(5).Replace(":", ""));
                currentTile = new Tile { Id = id };
                tiles.Add(currentTile);
                currentLine = 0;
            }
            else
            {
                int i = 0;
                foreach (var c in line)
                {
                    if (c == '#')
                    {
                        currentTile.Squares[currentLine, i] = true;
                    }
                    i++;
                }
                currentLine++;
            }
        }

        foreach (var tile in tiles)
        {
            tile.SetValues();
        }

        IDictionary<int, IList<Tile>> tilesByEdge = new Dictionary<int, IList<Tile>>();
        foreach (var tile in tiles)
        {
            AddTile(tile.UpValue);
            AddTile(tile.UpValueFlipped);
            AddTile(tile.RightValue);
            AddTile(tile.RightValueFlipped);
            AddTile(tile.DownValue);
            AddTile(tile.DownValueFlipped);
            AddTile(tile.LeftValue);
            AddTile(tile.LeftValueFlipped);
            void AddTile(int edge)
            {
                if (!tilesByEdge.ContainsKey(edge))
                {
                    tilesByEdge[edge] = new List<Tile>();
                }
                tilesByEdge[edge].Add(tile);
            }
        }

        Console.WriteLine(tilesByEdge.Values.Max(t => t.Count));
        Tile firstTile = null;
        long result = 1;
        foreach (var tile in tiles)
        {
            var up = tilesByEdge[tile.UpValue].Where(i => i.Id != tile.Id).Count();
            var right = tilesByEdge[tile.RightValue].Where(i => i.Id != tile.Id).Count();
            var down = tilesByEdge[tile.DownValue].Where(i => i.Id != tile.Id).Count();
            var left = tilesByEdge[tile.LeftValue].Where(i => i.Id != tile.Id).Count();
            if (up + down + right + left == 2)
            {
                firstTile = tile;
                if (up == 0 && right == 0)
                {
                    firstTile.Rotation = 3;
                }

                else if (down == 0 && right == 0)
                {
                    firstTile.Rotation = 2;
                }
                else if (down == 0 && left == 0)
                {
                    firstTile.Rotation = 1;
                }
                result *= tile.Id;
                Console.WriteLine(tile.Id);
            }
        }

        Tile[,] totalMap = new Tile[Size, Size];

        for (int row = 0; row < Size; row++)
        {
            if (row != 0)
            {
                var downEdge = totalMap[row - 1, 0].Sides().down;
                firstTile = tilesByEdge[downEdge].Single(t => t.Id != totalMap[row - 1, 0].Id);
                if (downEdge == firstTile.UpValue)
                {
                    firstTile.IsFlipped = false;
                    firstTile.Rotation = 0;
                }
                else if (downEdge == firstTile.UpValueFlipped)
                {
                    firstTile.IsFlipped = true;
                    firstTile.Rotation = 0;
                }
                else if (downEdge == firstTile.RightValue)
                {
                    firstTile.IsFlipped = false;
                    firstTile.Rotation = 3;
                }
                else if (downEdge == firstTile.RightValueFlipped)
                {
                    firstTile.IsFlipped = true;
                    firstTile.Rotation = 3;
                }
                else if (downEdge == firstTile.DownValue)
                {
                    firstTile.IsFlipped = true;
                    firstTile.Rotation = 2;
                }
                else if (downEdge == firstTile.DownValueFlipped)
                {
                    firstTile.IsFlipped = false;
                    firstTile.Rotation = 2;
                }
                else if (downEdge == firstTile.LeftValue)
                {
                    firstTile.IsFlipped = true;
                    firstTile.Rotation = 1;
                }
                else if (downEdge == firstTile.LeftValueFlipped)
                {
                    firstTile.IsFlipped = false;
                    firstTile.Rotation = 1;
                }
            }

            for (int column = 0; column < Size; column++)
            {
                if (column == 0)
                {
                    totalMap[row, column] = firstTile;
                }
                else
                {
                    var leftNeighbour = totalMap[row, column - 1];
                    var rightEdge = leftNeighbour.Sides().right;
                    var nextTile = tilesByEdge[rightEdge].Single(t => t.Id != leftNeighbour.Id);
                    if (rightEdge == nextTile.UpValue)
                    {
                        nextTile.IsFlipped = true;
                        nextTile.Rotation = 1;
                    }
                    else if (rightEdge == nextTile.UpValueFlipped)
                    {
                        nextTile.IsFlipped = false;
                        nextTile.Rotation = 3;
                    }
                    else if (rightEdge == nextTile.RightValue)
                    {
                        nextTile.IsFlipped = true;
                        nextTile.Rotation = 0;
                    }
                    else if (rightEdge == nextTile.RightValueFlipped)
                    {
                        nextTile.IsFlipped = false;
                        nextTile.Rotation = 2;
                    }
                    else if (rightEdge == nextTile.DownValue)
                    {
                        nextTile.IsFlipped = false;
                        nextTile.Rotation = 1;
                    }
                    else if (rightEdge == nextTile.DownValueFlipped)
                    {
                        nextTile.IsFlipped = true;
                        nextTile.Rotation = 3;
                    }
                    else if (rightEdge == nextTile.LeftValue)
                    {
                        nextTile.IsFlipped = false;
                        nextTile.Rotation = 0;
                    }
                    else if (rightEdge == nextTile.LeftValueFlipped)
                    {
                        nextTile.IsFlipped = true;
                        nextTile.Rotation = 2;
                    }

                    totalMap[row, column] = nextTile;
                }
            }
        }

        IList<string> map = new List<string>();
        for (int i = 0; i < Size; i++)
        {
            for (int k = 1; k < 9; k++)
            {
                var sb = new StringBuilder();

                for (int j = 0; j < Size; j++)
                {
                    for (int l = 1; l < 9; l++)
                    {
                        sb.Append(totalMap[i, j].Square(k, l) ? '#' : '.');
                    }
                }
                map.Add(sb.ToString());
            }
        }

        IList<(int dx, int dy)> monster = new List<(int dx, int dy)>
        {
            (0,0),
            (1,1),
            (4,1),
            (5,0),
            (6,0),
            (7,1),
            (10,1),
            (11,0),
            (12,0),
            (13,1),
            (16,1),
            (17,0),
            (18,-1),
            (18,0),
            (19,0)
        };

        foreach (var line in map)
        {
            Console.WriteLine(line);
        }

        Console.WriteLine();

        for (int rotation = 0; rotation <= 7; rotation++)
        {
            CheckMapForMonsters(map.ToList());
            IList<string> rotatedMap = new List<string>();
            for (int i = 0; i < map.Count; i++)
            {
                var sb = new StringBuilder();
                for (int j = 0; j < map.Count; j++)
                {
                    sb.Append(map[j][map.Count - 1 - i]);
                }
                rotatedMap.Add(sb.ToString());
            }

            map = rotatedMap;
            if (rotation == 3)
            {
                for (int k = 0; k < map.Count; k++)
                {
                    map[k] = new String(map[k].Reverse().ToArray());
                }
            }
        }

        void CheckMapForMonsters(IList<string> seaMap)
        {
            bool monsterFound = false;
            for (int x = 0; x < seaMap.Count - 19; x++)
            {
                for (int y = 1; y < seaMap.Count - 1; y++)
                {
                    if (seaMap[y][x] != '.')
                    {
                        bool isMonster = true;
                        {
                            foreach ((int dx, int dy) d in monster)
                            {
                                if (seaMap[y + d.dy][x + d.dx] == '.')
                                {
                                    isMonster = false;
                                    break;
                                }
                            }

                            if (isMonster)
                            {
                                monsterFound = true;
                                foreach ((int dx, int dy) d in monster)
                                {
                                    var line = seaMap[y + d.dy].ToCharArray();
                                    line[x + d.dx] = 'O';
                                    seaMap[y + d.dy] = new string(line);
                                }
                            }
                        }
                    }
                }
            }

            if (monsterFound)
            {
                long res = 0;
                foreach (var c in seaMap)
                {
                    res += c.Count(s => s == '#');
                }


                foreach (var line in seaMap)
                {
                    Console.WriteLine(line);
                }

                Result = res.ToString();
            }
        }
        return Task.CompletedTask;
    }

    private class Tile
    {
        public bool[,] Squares { get; } = new bool[10, 10];
        public long Id { get; set; }

        public bool IsFlipped { get; set; }
        public int Rotation { get; set; }

        public int UpValue { get; private set; }
        public int UpValueFlipped { get; private set; }
        public int RightValue { get; private set; }
        public int RightValueFlipped { get; private set; }
        public int DownValue { get; private set; }
        public int DownValueFlipped { get; private set; }
        public int LeftValue { get; private set; }
        public int LeftValueFlipped { get; private set; }

        public bool Square(int i, int j)
        {
            return (IsFlipped, Rotation) switch
            {
                (false, 0) => Squares[i, j],
                (false, 3) => Squares[j, 9 - i],
                (false, 2) => Squares[9 - i, 9 - j],
                (false, 1) => Squares[9 - j, i],
                (true, 0) => Squares[i, 9 - j],
                (true, 1) => Squares[j, i],
                (true, 2) => Squares[9 - i, j],
                (true, 3) => Squares[9 - j, 9 - i],

            };
        }

        public (int up, int right, int down, int left) Sides()
        {
            return (IsFlipped, Rotation) switch
            {
                (false, 0) => (UpValue, RightValue, DownValue, LeftValue),
                (false, 1) => (LeftValueFlipped, UpValue, RightValueFlipped, DownValue),
                (false, 2) => (DownValueFlipped, LeftValueFlipped, UpValueFlipped, RightValueFlipped),
                (false, 3) => (RightValue, DownValueFlipped, LeftValue, UpValueFlipped),
                (true, 0) => (UpValueFlipped, LeftValue, DownValueFlipped, RightValue),
                (true, 1) => (LeftValue, DownValue, RightValue, UpValue),
                (true, 2) => (DownValue, RightValueFlipped, UpValue, LeftValueFlipped),
                (true, 3) => (RightValueFlipped, UpValueFlipped, LeftValueFlipped, DownValueFlipped),
                _ => throw new Exception()
            };
        }

        public override string ToString()
        {
            return $"{IsFlipped} {Rotation} {Id}";
        }

        public void SetValues()
        {
            int power = 1;
            for (int i = 0; i < 10; i++)
            {
                if (Squares[0, i])
                {
                    UpValue += power;
                }

                if (Squares[0, 9 - i])
                {
                    UpValueFlipped += power;
                }

                if (Squares[i, 9])
                {
                    RightValue += power;
                }

                if (Squares[9 - i, 9])
                {
                    RightValueFlipped += power;
                }

                if (Squares[9, i])
                {
                    DownValue += power;
                }

                if (Squares[9, 9 - i])
                {
                    DownValueFlipped += power;
                }

                if (Squares[i, 0])
                {
                    LeftValue += power;
                }

                if (Squares[9 - i, 0])
                {
                    LeftValueFlipped += power;
                }
                power *= 2;
            }
        }

        public override bool Equals(object? obj)
        {
            return Equals((Tile)obj);
        }

        protected bool Equals(Tile other)
        {
            return Id == other.Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }

    public override int Nummer => 202020;
}